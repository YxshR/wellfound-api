name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install-deps
    
    - name: Run backend tests
      run: npm run test:backend
      env:
        NODE_ENV: test
        MONGODB_TEST_URI: mongodb://localhost:27017/test
        GEMINI_API_KEY: test-key
    
    - name: Run frontend tests
      run: npm run test:frontend
      env:
        CI: true
    
    - name: Build application
      run: npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Railway
      uses: railway-app/railway-deploy@v1
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: backend
        
  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Basic health check backend
      run: |
        echo "Checking backend health..."
        curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1
        
    - name: Detailed health check backend
      run: |
        echo "Running detailed backend health check..."
        response=$(curl -s ${{ secrets.BACKEND_URL }}/api/health/detailed)
        echo "Health check response: $response"
        status=$(echo $response | jq -r '.status')
        if [ "$status" != "OK" ] && [ "$status" != "DEGRADED" ]; then
          echo "Backend health check failed with status: $status"
          exit 1
        fi
        
    - name: Check backend metrics
      run: |
        echo "Checking backend metrics..."
        curl -f ${{ secrets.BACKEND_URL }}/api/metrics || echo "Metrics endpoint not available"
        
    - name: Health check frontend
      run: |
        echo "Checking frontend health..."
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1
        
    - name: Test critical API endpoints
      run: |
        echo "Testing critical API endpoints..."
        # Test projects endpoint
        curl -f -X GET ${{ secrets.BACKEND_URL }}/api/projects || exit 1
        echo "Projects endpoint OK"
        
    - name: Performance test
      run: |
        echo "Running basic performance test..."
        time curl -s ${{ secrets.BACKEND_URL }}/api/health > /dev/null
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "Backend: ${{ secrets.BACKEND_URL }}"
        echo "Frontend: ${{ secrets.FRONTEND_URL }}"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs and health endpoints"